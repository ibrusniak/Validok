
#Область ПрограммныйИнтерфейс

// Проводит валидацию значения согласно шаблону.
// 
// Документация: https://github.com/ibrusniak/Validok
// 
// Параметры:
//		Значение - значение любого типа, поддерживаемого валидатором.
//		см. функцию ПоддерживаемыеВалидаторомТипыЗначения();
//
//		ШаблонJson - Строка - шаблон валидации в виде строки в нотации JSON.
//		см. документацию: https://github.com/ibrusniak/Validok
// 
// Возвращаемое значение:
//
//		Структура с полями:
//			* Результат - Булево - результат валидаци, пройдена или нет.
//			* Ошибки - Соответствие - ошибки валидации
//
Функция Валидация(Значение, ШаблонJson) Экспорт

	ТипЗначения = ТипЗнч(Значение);
	
	Если НЕ ТипЗначенияПоддерживаетсяВалидатором(ТипЗначения) Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			ПолучитьЛокализованнуюСтроку("ВалидаторТипЗначенияНеПоддерживается"),
				ТипЗнч(Значение),
				ПоддерживаемыеВалидаторомТипыЗначенияСтрокой());
	КонецЕсли;
	
	СтруктураВозврата = СтруктураВозвратаВалидатора();

	Шаблон = БазовыеПроверкиШаблона(ШаблонJson);
	
	ТипЗначенияТребуемый = Тип(Шаблон["Тип"]);
	
	Если ТипЗначенияТребуемый = Тип("Число") Тогда
		Стр = ВалидацияЗначенияТипаЧисло(Значение, Шаблон);
	ИначеЕсли ТипЗначенияТребуемый = Тип("Строка") Тогда
		Стр = ВалидацияЗначенияТипаСтрока(Значение, Шаблон);
	КонецЕсли;
	
	СтруктураВозврата.Результат = Стр.Результат;
	ДополнитьСтруктуру(СтруктураВозврата.Ошибки, Стр.Ошибки);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция БазовыеПроверкиШаблона(ШаблонJson)

	ТекстовкаИсключения =
		НСтр("en = 'Template error. Template must be in JSON notation and deserializable into a value of type ''%1''';
		|ru = 'Ошибка шаблона. Шаблон должен быть в нотации JSON и десериализоваться в значение типа ''%1''';
		|uk = 'Помилка шаблону. Шаблон має бути у нотації JSON і десеріалізуватися у значення типу ''%1'''");
	
	Попытка
		Шаблон = ДесериализоватьJsonВСоответствие(ШаблонJson);	
	Исключение
		ВызватьИсключение ПодставитьПараметрыВСтроку(ТекстовкаИсключения, Тип("Соответствие"));	
	КонецПопытки;
	
	Если ТипЗнч(Шаблон) <> Тип("Соответствие") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(ТекстовкаИсключения, Тип("Соответствие"));	
	КонецЕсли;
	
	Если Шаблон["Тип"] = Неопределено Тогда
		ВызватьИсключение
			НСтр("en = 'Template error. Template must contain the required field ''Тип''';
			|ru = 'Ошибка шаблона. Шаблон должен содержать обязательное поле ''Тип''';
			|uk = 'Помилка шаблону. Шаблон має містити обов''язкове поле ''Тип'''");
	КонецЕсли;
	
	Попытка
		ТипЗначенияВШаблоне = Тип(Шаблон["Тип"]);
	Исключение
		ВызватьИсключение
			НСтр("en = 'Template error. The ''Тип'' field in the template specifies a data type not supported by the 1C system';
			|ru = 'Ошибка шаблона. В поле шаблона ''Тип'' указан тип данных, не поддерживаемый системой 1С';
			|uk = 'Помилка шаблону. У полі шаблону ''Тип'' вказано тип даних, який не підтримується системою 1С'");
	КонецПопытки;
	
	Если Не ТипЗначенияПоддерживаетсяВалидатором(ТипЗначенияВШаблоне) Тогда
		ВызватьИсключение
				ПодставитьПараметрыВСтроку(
					НСтр("en = 'Template error. Value type specified in the template (''%1'') is not supported by the validator';
					|ru = 'Ошибка шаблона. Тип значения, указанный в шаблоне (''%1''), не поддерживается валидатором';
					|uk = 'Помилка шаблону. Тип значення, вказаний у шаблоні (''%1''), не підтримується валідатором'"), ТипЗначенияВШаблоне);
	КонецЕсли;
	
	Если Шаблон["Обязательно"] = Неопределено Тогда
		ВызватьИсключение
			НСтр("en = 'Template error. Template must contain the required field ''Обязательно''';
			|ru = 'Ошибка шаблона. Шаблон должен содержать обязательное поле ''Обязательно''';
			|uk = 'Помилка шаблону. Шаблон має містити обов''язкове поле ''Обязательно'''");
	КонецЕсли;
	
	Если ТипЗнч(Шаблон["Обязательно"]) <> Тип("Булево") Тогда
		ВызватьИсключение
			ПодставитьПараметрыВСтроку(
				НСтр("en = 'Template error. Field ''Обязательно'' must be of type ''%1''';
				|ru = 'Ошибка шаблона. Поле ''Обязательно'' должно быть типа ''%1''';
				|uk = 'Помилка шаблону. Поле ''Обязательно'' має бути типу ''%1'''"), Тип("Булево"));
	КонецЕсли;
	
	ПроверитьКлючиШаблона(Шаблон);
	
	Возврат Шаблон;
	
КонецФункции

Функция ПроверитьКлючиШаблона(Шаблон)

	Для каждого КЗ Из Шаблон Цикл
		
		Если КЗ.Ключ = "Шаблон" Тогда
			
			Если ТипЗнч(КЗ.Значение) = Тип("Соответствие") Тогда
				ПроверитьКлючиШаблона(КЗ.Значение);
			Иначе
				
				ВызватьИсключение
					ПодставитьПараметрыВСтроку(
						НСтр("en = 'Template error. Field ''Шаблон'' must be of a composite type (%1)';
						|ru = 'Ошибка шаблона. Поле ''Шаблон'' должно быть составного типа (%1)';
						|uk = 'Помилка шаблону. Поле ''Шаблон'' має бути складного типу (%1)'"), Тип("Соответствие"));
				
			КонецЕсли;
			
		Иначе
			
			Если РазрешенныеВШаблонеИменаКлючей().Найти(КЗ.Ключ) = Неопределено Тогда
				
				ВызватьИсключение
					ПодставитьПараметрыВСтроку(
						НСтр("en = 'Template error. Unknown key in template: ''%1''';
						|ru = 'Ошибка шаблона. Неизвестный ключ в шаблоне: ''%1''';
						|uk = 'Помилка шаблону. Невідомий ключ у шаблоні: ''%1'''"), КЗ.Ключ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Функция РазрешенныеВШаблонеИменаКлючей()

	МассивРазрешенныхКлючей = Новый Массив();
	
	МассивРазрешенныхКлючей.Добавить("Тип");
	МассивРазрешенныхКлючей.Добавить("Обязательно");
	МассивРазрешенныхКлючей.Добавить("Мин");
	МассивРазрешенныхКлючей.Добавить("Макс");
	МассивРазрешенныхКлючей.Добавить("Шаблон");
	МассивРазрешенныхКлючей.Добавить("РегулярноеВыражение");
	
	Возврат МассивРазрешенныхКлючей;

КонецФункции

Функция ВалидацияЗначенияТипаЧисло(Значение, Шаблон)
	
	СтруктураВозврата = СтруктураВозвратаВалидатора();

	Стр = ТипЗначенияСоответствуетТипу(Значение, Тип(Шаблон["Тип"]));
	
	Если НЕ Стр.Результат Тогда
		СтруктураВозврата.Результат = Стр.Результат;
		ДополнитьСтруктуру(СтруктураВозврата.Ошибки, Стр.Ошибки);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Мин = Шаблон["Мин"];
	Макс = Шаблон["Макс"];
	
	ПроверитьГраничныеЗначения(Мин, Макс, Шаблон);
		
	Если Мин <> Неопределено И Значение < Мин Тогда
		
		СтруктураВозврата.Результат = Ложь;
		СтруктураВозврата.Ошибки.Вставить(Строка(Значение),
			ПодставитьПараметрыВСтроку(НСтр("en = 'Value must be greater than or equal to %1';
											|ru = 'Значение должно быть больше или равно %1';
											|uk = 'Значення має бути більшим або дорівнювати %1'"), Мин));
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
	Если Макс <> Неопределено И Значение > Макс Тогда
		
		СтруктураВозврата.Результат = Ложь;
		СтруктураВозврата.Ошибки.Вставить(Строка(Значение),
			ПодставитьПараметрыВСтроку(НСтр("en = 'Value must be less than or equal to %1';
											|ru = 'Значение должно быть меньше или равно %1';
											|uk = 'Значення має бути меньше або дорівнювати %1'"), Макс));
		Возврат СтруктураВозврата;
		
	КонецЕсли;

	Если Шаблон["Обязательно"] И
		((Мин <> Неопределено И Мин > 0) ИЛИ Мин = Неопределено) И
		((Макс <> Неопределено И Макс <> 0) ИЛИ Макс = Неопределено) И
		Значение = 0 Тогда
		
		СтруктураВозврата.Результат = Ложь;
		СтруктураВозврата.Ошибки.Вставить(Строка(Значение),
			НСтр("en = 'Value must be specified';
			|ru = 'Значение должно быть задано';
			|uk = 'Значення має бути задано'"));
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ВалидацияЗначенияТипаСтрока(Значение, Шаблон)
	
	СтруктураВозврата = СтруктураВозвратаВалидатора();

	Стр = ТипЗначенияСоответствуетТипу(Значение, Тип(Шаблон["Тип"]));
	
	Если НЕ Стр.Результат Тогда
		СтруктураВозврата.Результат = Стр.Результат;
		ДополнитьСтруктуру(СтруктураВозврата.Ошибки, Стр.Ошибки);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Мин = Шаблон["Мин"];
	Макс = Шаблон["Макс"];
	
	ПроверитьГраничныеЗначения(Мин, Макс, Шаблон);
		
	Если Мин <> Неопределено И СтрДлина(Значение) < Мин Тогда
		
		СтруктураВозврата.Результат = Ложь;
		СтруктураВозврата.Ошибки.Вставить(Строка(Значение),
			ПодставитьПараметрыВСтроку(НСтр("en = 'String length must be greater than or equal to %1';
			|ru = 'Длина строки должна быть больше или равна %1';
			|uk = 'Довжина рядка має бути більшою або дорівнювати %1'"), Мин));
		Возврат СтруктураВозврата;
		
	КонецЕсли;
		
	Если Макс <> Неопределено И СтрДлина(Значение) > Макс Тогда
		
		СтруктураВозврата.Результат = Ложь;
		СтруктураВозврата.Ошибки.Вставить(Строка(Значение),
			ПодставитьПараметрыВСтроку(НСтр("en = 'String length must be less than or equal to %1';
			|ru = 'Длина строки должна быть меньше или равна %1';
			|uk = 'Довжина рядка має бути меншою або дорівнювати %1'"), Макс));
		Возврат СтруктураВозврата;
		
	КонецЕсли;

	Если Шаблон["Обязательно"] И
		((Мин <> Неопределено И Мин > 0) ИЛИ Мин = Неопределено) И
		((Макс <> Неопределено И Макс <> 0) ИЛИ Макс = Неопределено) И
		СтрДлина(Значение) = 0 Тогда
		
		СтруктураВозврата.Результат = Ложь;
		СтруктураВозврата.Ошибки.Вставить(Строка(Значение),
			НСтр("en = 'Value must be specified';
			|ru = 'Значение должно быть задано';
			|uk = 'Значення має бути задано'"));
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	РегулярноеВыражение = Шаблон["РегулярноеВыражение"];
	
	Если РегулярноеВыражение <> Неопределено Тогда
		
		Если ТипЗнч(РегулярноеВыражение) <> Тип("Строка") Или ПустаяСтрока(РегулярноеВыражение) Тогда
			
			ВызватьИсключение
				НСтр("en = 'Template error. Regular expression must be a non-empty string';
				|ru = 'Ошибка шаблона. Регулярное выражение должно быть не пустой строкой';
				|uk = 'Помилка шаблону. Регулярний вираз має бути непорожнім рядком'");
			
		КонецЕсли;
		
		Попытка
			СоответствуетРВ = ПроверитьСтрокуНаСоответствиеРегулярномуВыражению(Значение, РегулярноеВыражение)		
		Исключение
			
			ВызватьИсключение;
				ПодставитьПараметрыВСтроку(
					НСтр("en = 'Error in regular expression: %1'; ru = 'Ошибка в регулярном выражении: %1'; uk = 'Помилка в регулярному виразі: %1'"),
					ОписаниеОшибки());
					
		КонецПопытки;
		
		Если НЕ СоответствуетРВ Тогда
			
			СтруктураВозврата.Результат = Ложь;
			СтруктураВозврата.Ошибки.Вставить(Строка(Значение),
				НСтр("en = 'String does not match the regular expression';
				|ru = 'Строка не соответствует регулярному выражению';
				|uk = 'Рядок не відповідає регулярному виразу'"));
				
			Возврат СтруктураВозврата;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

Процедура ПроверитьГраничныеЗначения(Мин, Макс, Шаблон)

	ИмяПоляМинимальногоНачения = "Мин";
	ИмяПоляМаксимальногоЗначения = "Макс";
									 
	Если Мин <> Неопределено И ТипЗнч(Мин) <> Тип("Число") Тогда
		
		ВызватьИсключение
			ПодставитьПараметрыВСтроку(
				НСтр("en = 'Template error. Field ''%2'' must be of type ''%1''';
				|ru = 'Ошибка шаблона. Ошибка шаблона. Поле ''%2'' должно быть типа ''%1''';
				|uk = 'Помилка шаблону. Поле ''%2'' має бути типу ''%1'''"), Тип("Число"), ИмяПоляМинимальногоНачения);
				
	КонецЕсли;
	
	Если Макс <> Неопределено И ТипЗнч(Макс) <> Тип("Число") Тогда
		
		ВызватьИсключение
			ПодставитьПараметрыВСтроку(
				НСтр("en = 'Template error. Field ''%2'' must be of type ''%1''';
				|ru = 'Ошибка шаблона. Поле ''%2'' должно быть типа ''%1''';
				|uk = 'Помилка шаблону. Поле ''%2'' має бути типу ''%1'''"), Тип("Число"), ИмяПоляМаксимальногоЗначения);
				
	КонецЕсли;

	Если Мин <> Неопределено И Макс <> Неопределено И
		Мин >= Макс Тогда
		
		ВызватьИсключение
			НСтр("en = 'Template error. The lower bound of the value must be less than the upper bound';
			|ru = 'Ошибка шаблона. Нижняя граница значения должна быть меньше верхней';
			|uk = 'Помилка шаблону. Нижня межа значення має бути меншою за верхню'");
		
	КонецЕсли;

	Если Шаблон["Тип"] = "Строка" Тогда
		
		Если Мин <> Неопределено И Мин < 0 Тогда
			
			ВызватьИсключение
				НСтр("en = 'Template error. The ''Min'' value for type ''String'' cannot be less than 0';
				|ru = 'Ошибка шаблона. Значение ''Мин'' для типа ''Строка'' не может быть меньше 0';
				|uk = 'Помилка шаблону. Значення ''Мін'' для типу ''Рядок'' не може бути меншим за 0'");
			
		КонецЕсли;
		
		Если Макс <> Неопределено И Макс < 1 Тогда
			
			ВызватьИсключение
				НСтр("en = 'Template error. The ''Max'' value for type ''String'' cannot be less than 1';
				|ru = 'Значение ''Макс'' для типа ''Строка'' не может быть меньше 1';
				|uk = 'Помилка шаблону. Значення ''Макс'' для типу ''Рядок'' не може бути меншим за 1'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТипЗначенияСоответствуетТипу(Значение, ТребуемыйТип)
	
	СтруктураВозврата = СтруктураВозвратаВалидатора();

	Если ТипЗнч(Значение) <> ТребуемыйТип Тогда
		
		СтруктураВозврата.Результат = Ложь;
		СтруктураВозврата.Ошибки.Вставить(Строка(Значение),
			ПодставитьПараметрыВСтроку(
				НСтр("en = 'Value must be of type ''%1'''; ru = 'Значение должно быть типа ''%1'''; uk = 'Значення має бути типу ''%1'''"),
				ТребуемыйТип));
		
	КонецЕсли;	

	Возврат СтруктураВозврата;
	
КонецФункции

Функция СтруктураВозвратаВалидатора()
	Возврат Новый Структура("Результат, Ошибки", Истина, Новый Соответствие);
КонецФункции

Функция ТипЗначенияПоддерживаетсяВалидатором(ТипЗначения)
	Возврат ПоддерживаемыеВалидаторомТипыЗначения().Найти(ТипЗначения) <> Неопределено;
КонецФункции

// Возвращает массив значений типа Тип, которые поддерживаются валидатором.
// 
// Возвращаемое значение:
//		Массив элеметов типа Тип
//
Функция ПоддерживаемыеВалидаторомТипыЗначения()

	МассивПоддерживаемихТипов = Новый Массив;
	
	МассивПоддерживаемихТипов.Добавить(Тип("Число"));
	МассивПоддерживаемихТипов.Добавить(Тип("Строка"));
	
	Возврат МассивПоддерживаемихТипов;

КонецФункции

Функция ПоддерживаемыеВалидаторомТипыЗначенияСтрокой()
	
	
	МассивПоддерживаемыхТипов = ПоддерживаемыеВалидаторомТипыЗначения();
	
	Стр = "";
	
	Для каждого ПоддерживаемыйТип Из МассивПоддерживаемыхТипов Цикл
		Стр = Стр + ПоддерживаемыйТип + ", ";
	КонецЦикла;
	
	Стр = Лев(Стр, СтрДлина(Стр) - 2);
	
	Возврат Стр;
	
КонецФункции

Функция ПолучитьЛокализованнуюСтроку(Ключ)
	
	ЛокализованныеСтроки = Новый Соответствие;
	
	ЛокализованныеСтроки.Вставить("ВалидаторТипЗначенияНеПоддерживается",
		НСтр("en = 'Validator does not support validation of values of type ''%1''. Supported value types: %2';
		|ru = 'Валидатор не поддерживает валидацию значений типа ''%1''. Поддерживаемые типы значения: %2';
		|uk = 'Валідатор не підтримує валідацію значень типу ''%1''. Підтримувані типи значень: %2'"));
		
	ЛокализованныеСтроки.Вставить("ДесериализацииИзJson",
		НСтр("en = 'Error deserializing object from JSON';
		|ru = 'Ошибка десериализации объекта из JSON';
		|uk = 'Помилка десеріалізації об''єкта з JSON'"));
		
	Строка = ЛокализованныеСтроки[Ключ];
	
	Если Строка = Неопределено Тогда
		ВызватьИсключение 
			ПодставитьПараметрыВСтроку(
				НСтр("en = 'Missing localized string for key ''%1''';
				|ru = 'Отсутствует локализованная строка для ключа ''%1''';
				|uk = 'Відсутній локалізований рядок для ключа ''%1'''"), Ключ);
	КонецЕсли;
	
	Возврат Строка;

КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
	
КонецФункции

Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке) Экспорт
	
	Описание = ИнформацияОбОшибке.Описание;
	
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		Описание = Описание + " -> " +
		ИнформациюОбОшибкеВСтроку(ИнформацияОбОшибке.Причина);
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Процедура ДополнитьСтруктуру(Приемник, Источник)
	Для каждого КЗ Из Источник Цикл
		Приемник.Вставить(КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
КонецПроцедуры

Функция ДесериализоватьJsonВСоответствие(Json) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Json);
	Соответствие = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	Возврат Соответствие;
	
КонецФункции

Функция ПроверитьСтрокуНаСоответствиеРегулярномуВыражению(Строка, РегульярноеВыражение)
	
    Чтение = Новый ЧтениеXML;
	
    Чтение.УстановитьСтроку(
                "<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
                |<package targetNamespace=""sample-my-package"">
                |<valueType name=""testtypes"" base=""xs:string"">
                |<pattern>" + РегульярноеВыражение + "</pattern>
                |</valueType>
                |<objectType name=""TestObj"">
                |<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
                |</objectType>
                |</package>
                |</Model>");

    Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
    МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
	
	Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
	
	Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));

    Попытка
        Тест.TestItem = Строка;
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;
    
КонецФункции

#КонецОбласти
